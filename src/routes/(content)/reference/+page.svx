---
layout: contentindex
---

<script>
	import { fade } from 'svelte/transition';
	import { db } from '$lib/app';
	import References from '$lib/components/mosaic/References.svelte';
	import FuzzySearch from 'fuzzy-search';	

	let references = db.filter(x => x.section === 'reference');

	let categorised = {
		'Analyse Data' : [],
		'Analyse Sound' : [],
		'Utility Objects' : [],
		'Decompose Sound' : [],
		'Slice Sound' : [],
		'Transform Sound' : []
	};
	let query = '';

	references.forEach(r => { 
		categorised[r.category].push(r)
	});

	const search = new FuzzySearch(references, ['title', 'tags', 'blurb', 'category'], {
		caseSensitive: false,
		sort: false
	})

	function populateItems() {
		return Object.entries(categorised).map(k => ({ "category" : k[0], "refs" : k[1] }));
	}
	let items = populateItems();
	function doSearch() {
		Object.keys(categorised).forEach(c => {
			categorised[c] = [];
		});
		let result = query === '' ? references : search.search(query);		
		result.forEach(r => { 
			categorised[r.category].push(r);
		});

		items = populateItems();
	}
</script>

<div class="reference-page">
	<h1 class='title'>Reference</h1>

	<form>
		<label class="visually-hidden" for="query">Search references</label>
		<input 
			bind:value={query} 
			on:input={doSearch}
			placeholder='Search references...'
			id="query"
		>
	</form>

	<References bind:items={items} />
</div>

<style>
	.reference-page {
		width: 100%;
	}

	.title {
		color: var(--dark-blue);
		margin-bottom: 1em;
	}

	form {
		margin-bottom: 2em;
	}

	input {
		width: 100%;
		font-size: 1rem;
		padding: 0.75em 1em;
		border: 1px solid #e0e0e0;
		border-radius: 12px;
		transition: all 0.3s ease;
	}

	input:focus {
		outline: none;
		border-color: var(--med-blue);
		box-shadow: 0 0 0 2px rgba(3, 113, 181, 0.2);
	}

	.visually-hidden {
		position: absolute;
		width: 1px;
		height: 1px;
		padding: 0;
		margin: -1px;
		overflow: hidden;
		clip: rect(0, 0, 0, 0);
		white-space: nowrap;
		border: 0;
	}
</style>