---
title: Dealing with Time
author: James
blurb: |
    Strategies for encoding and explaining time to a computer.
tags:
    - time
    - smoothing
    - descriptors
    - audio descriptors
    - statistics
flair: tutorial
featuredimage: /learn/for-featured-images/2D-corpus-explorer.png
---

<script>
    import NoiseShape from '$lib/widget/time/NoiseShape.svelte';
    import PitchShape from '$lib/widget/time/PitchShape.svelte';
    import NoisePitchShape from '$lib/widget/time/NoisePitchShape.svelte';
</script>

## Introduction

When we analyse sound with computers, the notion of time is critical. For humans, listening is an incredibly complex process that bundles many physiological and psychological elements into a relatively passive and automatic process. We can identify different perceptual features of sound simultaneously, understand intentions behind its production, trace musical elements that evolve and come to interpretations that connect different listening experiences together. Computer's have no such understanding of sound and by comparison are really quite stupid when you compare them to what a human can do. They are especially good though at _quantitative_ listening, and generating numbers that may or may not faithfully express the perceptual characteristics of sound. You might be thinking, "Hey! You just described an audio descriptor", and you would be right. This set of learn articles is going to reflect on the tension between human and machine listening and how that effects the way we encode musical representation, specifically _time_ in data using audio descriptors and other forms of data.

## Time, Evolution and Data

Sound evolving and being experienced through time is an inescapable facet of how we listen to and interpret it. Think about all the different ways that a sound may or may not vary and how this contributes so strongly to it's nature, ability to elicit different responses as a listener. One neat entry point is to start to describe sound with _curves_ and _shapes_. If you wanted to dive into a more theoretical approach to this way of thinking, then you might want to read about [Temporal Semiotic Units](https://www.labo-mim.org/site/index.php?2013/03/29/225-temporal-semiotic-units-tsus-a-very-short-introduction#:~:text=TSUs%20have%20been%20defined%20as,their%20dynamic%20pattern%20over%20time.).

Click the play button and listen to the sound. The green line moving up and down over time maps onto the changes in amplitude or loudness.

<NoiseShape />

We could also describe other aspects like pitch, here described by the blue line.

<PitchShape />

The combination of many different curves that trace perceptual elements of a sound over time might culminate in a more holistic understanding of a sound. This is still quite simple, but imagine the amplitude and pitch moving together as a kind of _multivariate_ audio descriptor. Let's imagine amplitude and pitch moving together now with the green and blue lines depicting amplitude and pitch respectively. 

<NoisePitchShape />

Satisfying moving lines aside, this model of sound is far too simplistic to compare to that of a human. We combine, layer and meld together multiple shapes simultaneously over different time scales, looking at small changes in the moment at the same time as considering the grander scheme of things. Considering this begins to unpick at the issue of encoding the evolving nature of sound into data. How much time is _enough_ to be meaningful? Is all time equal? How do bits of time relate to other bits of time? 

This question emerges in several different places, especially in our own tutorials. For example, the [classification with a neural network](/learn/classification-neural-network) tutorial deals with time in a straightforward and effective way, by capturing several examples of very brief moments in time using the [MFCC descriptor](/reference/mfcc). This is designed with somewhat static sounds in mind, where the variation of those MFCC values won't change in drastic ways too fast or evolve in complex ways. The neural network is also quite clever, and with enough examples and sufficient training, it is good at differentiating with just this information provided to it. If you, for example though wanted to explicitly have the same neural network classify sounds based on their evolution you might not to find a different strategy for encoding that in data. Similarly, the [2D Corpus Explorer tutorial](/learn/2d-corpus-explorer) makes a crude assumption about how time operates. It uses [statistical derivatives](/reference/bufstats#derivatives) in an attempt to encode the evolving perceptual structures of short sound samples. This approach is actually quite prone to producing noisy and non-sensical data, and I often refer to this as the "sausage machine approach", in which you throw a bunch of somewhat connected information at a clever algorithm like [UMAP](/reference/umap) and hope that it can unfurl some structure from it. This of course is entirely validated by its success in musical practice. We are not looking for exact answers here, rather, things that work to _make sound_. The same goes for the classification tutorial.

This is really just the start of thinking about _time_ and we hope that you delve into it more through a series of [Learn Articles](/learn) that we think might provoke you to consider how you represent time through data, and how the evolution of sound can be captured and encoded into workflows with the FluCoMa toolkit.

[Smoothing](/learn/smoothing-data)
<!-- [Pitch Refinement](/learn/refining-pitch-analysis) -->
<!-- [LPT](/learn/lpt) -->




 
