---
title: Distribution and Histograms
blurb: |
    Histograms, distribution functions, and the normal distribution
tags: 
    - distribution
    - standard deviation
    - mean
    - median
    - mode
    - normal
    - histogram
    - stats
    - statistics
flair: tutorial
featuredimage: /learn/bufstats/Standard_deviation_diagram.png
---

<script>
    import CodeBlock from '$lib/components/CodeBlock.svelte';
    import { Tabs, TabList, TabPanel, Tab } from '$lib/components/tabs/tabs';
    import Image from '$lib/components/Image.svelte';
    import IndentNote from '$lib/components/IndentNote.svelte';
</script>

<!-- <IndentNote type='pointer'>

For a more critical consideration of what these distributions can and cannot tell us, see the page on [Statistical Assumptions](/learn/statistical-assumptions).

</IndentNote> -->

## Histogram

Many of the statistical summaries that BufStats computes are intended to provide some insight on how the data is distributed across the range that it covers. A distribution is often approximated as a histogram, which divides the range covered by the data into discrete bins and then shows how many values in the data fall within each bin. The way a histogram ends up looking (and how informative it may be) is quite dependent on how many bins are used and their width.

<Image
src="histogram.png"
label="A histogram of 25 bins showing the distribution of MFCC 2 values in an analysis of Nicol-LoopE-M.wav"
/>

Sometimes the distribution is represented as a curve which can be called a distribution function. It shows the likelihood that a data point will exist for any given value in the range. 

<Image
src="distribution_function.png"
label="Distribution function based on the same data as the histogram above."
/>

<IndentNote type='pointer'>

Keep in mind that the distribution functions are not the functions being analysed by BufStats, but instead represent the distribution of the values in the buffer channel being analysed by BufStats.

</IndentNote>

## Normal Distribution

Normal distribution (also called a Gaussian Distribution) is a technical term meaning that the distribution of data demonstrates a set of certain characteristics. 

* The _mean_, _median_, and _mode_ are all coincident, meaning they are the same value.
* The distribution function is symmetrical around this coincident value.
* The data follows the [68/95/99.7 rule](/#the-68-95-99.7-rule). 

Sometimes a normal distribution is referred to as a "bell curve" because the shape of the distribution function looks like a bell. Use the [example code below](/#example-code-to-check-distribution) to see the distribution of dimensions in a dataset and how much they look like a bell curve.

### The 68/95/99.7 Rule

If a collection of values is normally distributed, it follows the 68/95/99.7 rule. This rule states that ~68% of the data falls within one standard deviation of the mean, ~95% of the data falls within two standard deviations of the mean, and ~99.7% falls within three standard deviations of the mean. Because of this property, the mean and standard deviation taken together provide a lot of understanding about how the data is distributed.

For example if a [SpectralShape](/reference/spectralshape)'s spectral centroid time-series is analysed and BufStats returns a mean of 8000 Hz and a standard deviation off 1000 Hz, one can estimate that ~68% of the spectral centroids in that time series fall between 7000 and 9000 Hz (8000 Hz ± 1000 Hz). Similarly, one could estimate that ~95% of the data will fall between 6000 and 10,000 Hz (8000 Hz ± 2000 Hz) and ~99.7% will fall within between 5000 and 11,000 Hz (8000 Hz ± 3000 Hz). Keep in mind that if the data is not normally distributed, this will not hold true.

<Image
src="Standard_deviation_diagram.png"
label="When data is normally distributed, it follows the 68/95/99.7 rule, indicating how much of the data is found within standard deviations of the mean. (image reproduced from [Wikipedia](https://en.wikipedia.org/wiki/Standard_deviation))"
/>

## Uniform Distribution

Uniform distribution indicates that any value within a range is equally likely to occur. Because of the shape of the distribution function, this is also referred to as a rectangular distribution. One place this is often seen is in a spectrogram of white noise, which contains equal power across frequency spectrum. Similarly, [pseudo-random number generators](https://en.wikipedia.org/wiki/Pseudorandom_number_generator) are often designed to produce numbers in a uniform distribution across a specified range.

Although the uniform distribution is sometimes associated with randomness, it does not necessarily mean that the values in the dataset are random, it just means that they are uniformly distributed. For example, if one creates a dataset of pitch analyses using one recording for every note on the piano, the dataset will be uniformly distributed across the range of MIDI values 21-108 (this would be a discrete distribution, rather than continuous). A randomly chosen point from the dataset would be equally likely to have any MIDI value 21-108.

<Image
src="uniform.jpg"
label="A uniform distribution function for the range of values between _a_ and _b_. (image modified from [Wikipedia](https://en.wikipedia.org/wiki/Continuous_uniform_distribution))"
/>

## Categorical Distribution

A categorical distribution describes the possible outcomes when a randomly selected variable may be one of _K_ possible categories. The categories could be in any order but each will be in the range 0-1 (indicating a probability) and they will sum to 1. This can be seen when the [Chroma](/reference/chroma) argument `normalize` is set to 1, which ensures that all the Chroma values sum to 1. When used in this way, Chroma indicates the likelihood of the incoming signal to be each of the pitch classes.

## Example Code to Check Distribution

Example code to check the distribution of dimensions in a [DataSet](/reference/dataset) using a histogram

<Tabs>
    <TabList>
        <Tab>SuperCollider</Tab>
        <Tab>Max</Tab>
    </TabList>
    <TabPanel>
    
<CodeBlock>

```
~distributions = {
	arg dataset, numBins = 100;
	dataset.dump({
		arg dict;
		var data = dict["data"].values.flop;
		var histograms = data.collect{arg dim; dim.histo(numBins)};
		fork({
			var win = Window("Distributions",Rect(0,0,800,820));
			var plotter = Plotter("Distributions",Rect(0,20,win.bounds.width,win.bounds.height-20),win);
			EZSlider(win,Rect(0,0,win.bounds.width,20),"Dimension:",ControlSpec(0,histograms.size-1,step:1),{
				arg sl;
				plotter.value_(histograms[sl.value.asInteger]);
			},0,true,80);
			win.front;
		},AppClock);
	});
};
```

</CodeBlock>

    </TabPanel>
    <TabPanel>

<CodeBlock>

<pre><code>
----------begin_max5_patcher----------
1778.3oc6ZszaiaCD9ryuBBeo.ENFhjh5QOsW5s19GXQQfrLsi1ZIYHQmM6t
n6u8NbFIakDKKwXsaxgZXqGTzblu4EmgTe6lYyWU9ntdN62XejMa12tY1LrI
aCyZte177jGS2kTicadZYdttvLeA8Li9QC1tbIKcWV5+vL2WUdX68vYMac1l
M5Jn6vUv+pNqrnlkUPOKwjvp0FloDNoY5jz6+kZ18Y0lxsUI4sTXWVgNs7PA
RFYSi6qz0vvlXfQ7tmzCUaORLo2mUr8tJcpg.XjmZo2BVbzR0BFWEYuwOboG
6ua9OEGxyJ1oMHR4MMlsFwW4pOcK2e9odVdvz1UOai+6M2XOr3JkihkL.b6S
pzmjRaJqXIEI69RcVMbwZPdAGxPQGIlSMWVb8RgguH1hetBEFbg6BCwOdgAe
IaS1tcrDTNXMV9bl4dVcYNIYl2O93D9DBBfgR7NOG.3DprKzeFFwW.Oqd6nh
81A.jJxeIOnyGQLpwrnyiSXsOzIdI5jmGc9MsRMY9xdMQcjWAmsjpuLeAa9w
eGoWcxC502AiLvv2kXLUYqNXnPKyNJUlMWmuRiLg2hlV.S8jbsQWcmtHY0Nc
OOLOY+9iOFeJpCbUSjqqqS1pegpXKXa8ZT.7.qBPIbV9yiOuBf2mB.D0SHd2
TUlu5fM5LKeSZ5kbj7w3DQBKPicGnJueJ.sGWLBieePPFGh.KvyhxP0kQ44B
VDbdTJ5Cka1UlXrtPqRJ1NoPdytCYqWB.2h4uyB7Xent7PUplUWkx9.veok5
MapomXRpL38LN6CazIlCvTqn3B6Jvcqqgfodmc9kfgLahjzzKX7onXGDnhdB
+J6SfhxwEcDr+Prirhv+JKsb2s+QY49e+1+b4mSdXPumF6p1YgbwvRHe2XXY
XqXYPVd5jpKf3fXz6gGPS75G3Lj47WopOq.ANwguNjCV75SnqaVlcPX.ERzl
NoLtyGg0TGSqT0EuaJKL0YeE4VYzxP+n3HIORpBDd7nAkjT9pwubbAoXV9g7
tRwgDsQW1X5ByEel3zmrwNi7pKC.h3VFMXBSe5q6VV.YCxujwnOEWGbCsFiR
zMzsoubz860G4AxWx.xsAmIF8qDTbEeGbqhFHiCmT9+PBtLTnER.nvLQTbmi
qDE5ntrMtx0DP47nEJQ1ngZaf7jSJpg56xu.rkAwmlKMN14Lvh94YC2qxMa.
mT.YxHpXlXmUrRWyk1NQwDqNKVOBD1bxcUnL5sLI5eElqya4HvGTGJbx2yc7
46H9nrblRPlYzUCCQQ.NShv8JDjxeJpvLCF69xYvvEzzg1iA9XlEBopCX5W.
3GJ58eU.yefLw7wp1EOsrhckUMLncvAyHtJHJPD5q7hi77OaS7NLP11hRfis
qC4yxJ5ZS1oI0xmluSaRcf2w.Y.AQ42R4+01STMcGtjCHEryruvdj9120G+J
w1oiB7BA90COZUTPcrsMB8gKvlr+Au1Gpnl4dM+rRy.XJFaZr1R9wNg8H1Zr
SMKjz0BKkrTHx5UPcWZGAnMIu441eX1JMm8nwhqn9g+O0ow1Rc7rGwbdD4s1
av7eH2KwaUsWKwGwakSGE.zs7oL.AtxzCGgvWzDq28ffbGmmtwnbpmMCxqtF
bgzWNyZNFquoLOkxYzJhdqyJwtjlKGJreCLEQTvO2qeO3sblaJOyAVXyFLRo
eEHcWSJdOnIG8Bo6GPkNPEC9ZV6bd3+u34OQ7eHe+v0uvE7WY1u72C9PWFiM
FU7XDiAuBLJeqchn0MtYi19NqXTEkxUpNqvqaKym2ayJ716VhzoZbZeWGPDH
ZVoSRBHBbVmG+VZVSpaKDS1A4w98gAJkeSr6qgc36pkx+Y14CsOx9c2FYO2S
.fOsfGoKVtzydsMPd219SkHzV+zL1sASYmX+05ZSVwwBV93IeSamNqTezTxN
HhgnjbBnT7HfT3DPmnwPnnIgRgifR18H65ojZL1CASAkFCg3S.gBGgcWKruJ
Bo7FCjlBBMB5HmBOI4Xrvk7mzo7r06KghPaBHEnvfj9TJAcu6Z4swX.0Bfqi
R9igRQSAkjigRSge9yTZ8PIwXzrJutZVk2xIg23ig238xagzqvlpoVinfi2d
sL2H3MgXBzP1UDYPJMEgsDiIE.wTXdKFiijZJR1PHFCllhow3iJD4TPnwDaf
OEYav4izxiOEDRbUAghjzlLQN5GCB08cKprZstp+2UyokY4igYopHNNWn+4X
V90yrCZrDeIlMzidKIZdUSZJv+o2gAYUPMfAu3MgT7rHsTkJI62+ftptgOP1
GpR6SzF8fu7K12iE5VrD44U5Gxp6t+IySpfpxLPIYGpn8W5w.Z+BmmWBBuhC
YMxOPvAjDq.ztWT06SHYDVn3M+6M+G.NfTmN
-----------end_max5_patcher-----------
</code></pre>

</CodeBlock>
    </TabPanel>
</Tabs>
