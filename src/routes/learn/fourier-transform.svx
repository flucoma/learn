---
title: Fourier Transform
blurb: | 
    Commonly used spectral analysis method
tags: 
    - spectral processing
    - analysis
    - descriptors
    - bufstft
flair: article
---

<script>
    import YouTube from '$lib/components/YouTube.svelte';
    import STFTWindows from '$lib/widget/STFTWindows.svelte';
</script>

The Fourier Transform is, by far, the most commonly used spectral analysis method in audio analysis and machine listening. Most of the FluCoMa audio descriptors use this algorithm as the basis of their computation. Because a wealth of [resources](#resources) explaining the Fourier Transform in more general terms already exist, the focus of this resource is going to be on the practicalities of using it within FluCoMa. If unfamiliar with the Fourier Transform, we highly recommend this [interactive explanation](https://jackschaedler.github.io/circles-sines-signals/part3.html).

### Common Terms and Initialisms

* **Fourier Transform:** a mathematical operation that decomposes a continuous signal into sine wave components
* **Discrete Fourier Transform (DFT):** a mathematical operation that computes a Fourier Transform on a discrete signal
* **Fast Fourier Transform (FFT):** an algorithm for efficiently and quickly computing a DFT on a digital signal 
* **Short-Term Fourier Transform (STFT):** segmenting a signal in to windows and performing an FFT on each window

# Parameters

Any FluCoMa object that uses an STFT has three parameters that affect how the STFT is computed: `windowSize`, `hopSize`, and `fftSize`. Each of these is explained more below. Sometimes, adjusting these parameters is necessary to properly analyse a signal (if you're interested in low frequencies for example), however, changing these can also create different sounding results for many of the algorithms. These three parameters don't need to be thought of as "set it and forget it", but instead can explored for the aesthetic differences they might create!

* `windowSize`: The size in audio samples for each analysis window. The default is 1024 samples.
* `hopSize`: The number of audio samples between the start of each analysis window. `hopSize` less than `windowSize` creates overlap. The default of -1 indicates that `hopSize` should equal **`windowSize` / 2**.
* `fftSize`: The size of FFT to compute for each analysis window. The default of -1 indicates that `fftSize` should equal `windowSize`. `fftSize` must be >= `windowSize`. In order to fit the criterial of performing the FFT, if `fftSize` is not a power of two, the next largest power of two will be used. For an explanation of setting `fftSize` > `windowSize` see [oversampling](/#oversampling).

## Time vs Frequency Resolution
The larger the `windowSize`, the finer the frequency resolution the DFT provides, however, a larger `windowSize` also means there is less precision about _when_ the frequency information of the DFT has occurred (because a particular frequency component could be from anywhere within the window). This means that there is a trade-off between the time and frequency resolution of a DFT. A longer `windowSize` means we are (sort of) averaging information about the signal over a longer time, but getting more detailed information about the spectrum in return. Correspondingly, a shorter `windowSize` gives us a better impression of moment-to-moment information, but a coarser idea about frequency.

As a rule of thumb, if you want to get reliable tracking of partials in a harmonic(ish) sound, you will want to have a conservative 4 frequency bins between partials (because in practice energy gets smooshed across bins). For instance, to reliably identify and track the partials of a sawtooth wave at 100 Hz, you would want a bin resolution of 25 Hz. At a sampling rate of 44100 Hz, this would require a `windowSize` of 2048 samples (**frequency resolution = sample rate / `fftSize`**, or **44100 / 2048 = 21.53 Hz**).

[_See this great interactive explanations of time-frequency resolution._](https://jackschaedler.github.io/circles-sines-signals/dft_frequency.html)

## Zero Padding / Oversampling
Sometimes using an `fftSize` larger than the `windowSize` can be beneficial because it gives us high quality interpolation in the frequency domain frequency because of the "extra" bins we've added. In this case added "audio samples" used for the FFT are zeros. Note that this does not actually provide higher frequency in the frequency domain. Frequency resolution is still determined by the size of the window being analysed. See [Zero Padding](https://jackschaedler.github.io/circles-sines-signals/zeropadding.html) for more information.

## Linear Frequency Scale
* linear so it is way too top heavy (compare with mels) (piano keyboard vs. linear spectrogram)
  - show just hte bottom octave of the piano vs. where the bins line up
* Phase Vocoder algorithm (find a better explanation for this and point to that)

  - over sampling 
  - look at the spectrogram if yoou put two sine waves within a bin
  - using fluid pitch within supercollider with and iwthout oversampling, using oversampling did not give higher resolution in the low end but it did give hihger resolution in the high end
  
## Re-synthesising
One reason the STFT is so common is that it is simple to get back to our original signal by taking an inverse DFT. We can then sum together our [overlapping slices] to get back to where we were (provided we didn't change anything in the Fourier domain).

Under certain conditions, we can get back (almost) exactly what we put in, but we have to be careful. When we make our windows, it is usual to apply a particular shape to them, called a window function. Different window functions have different requirements for being able to provide perfect reconstruction. This generally depends on how much overlap we have between windows (i.e. the hop size in relation to the window size). In general, the overlap factor should be an whole number of at least two (the window should be at least twice as big as the hop). For some windows, you will need a factor of at least four.

  - pre-ring (same as smearing) happens if you touch anything (magnitudes or phase) (has to do with the size of the window) (make the window smaller looses low frequency resolution)
  - square wave example
* over lap add (mention hanning window)
  
# Phase Vocoder

The Phase Vocoder is a name for the most common model people use when doing spectral processing in the STFT domain. It represents a set of assumptions that allow us to work with intuitive quantities like amplitude and frequency, rather than directly with raw DFT output.

The DFT works with complex numbers, which can be represented in a range of different ways. Complex numbers are a convenient way to work with quantities where we need to express some notion of frequency. The form the DFT yields its results in tells us about how much our signal correlates with a cosine and a sine at each bin frequency (so we have two numbers for each bin). This isn't very intuitive to work with, so it is more common to switch to another form ('polar form'), that expresses the number as an amplitude and a phase for each bin.

If we assume that from window to window, each bin contains some coherent and continuing bit of signal, we can trace the changes in the phase between windows to estimate the frequency of this (hypothetical) component. This model works quite (remarkably) well in a lot of cases, but the na√Øve assumptions about inferring component frequencies from the phase can lead to familiar artefacts like softened transients, and a chorus-y sound. By and large, if the sound we analyse is well represented by the Phase Vocoder assumptions:

- mostly tonal components
- that change slowly with respect to the hop size
- well spaced in frequency with respect to the DFT resolution

# Related Resources

https://jackschaedler.github.io/circles-sines-signals/

3Blue1Brown But what is the Fourier Transform? A visual introduction.
https://www.youtube.com/watch?v=spUNpyF58BY&feature=youtu.be

https://www.audiolabs-erlangen.de/resources/MIR/FMP/C2/C2_STFT-Window.html

https://cycling74.com/tutorials/the-phase-vocoder-%E2%80%93-part-i

3Blue1Brown The more general uncertainty principle, beyond quantum
https://www.youtube.com/watch?v=MBnnXbOM5S4
