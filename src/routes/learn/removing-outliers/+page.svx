---
title: Removing Outliers with BufStats
author: Ted
blurb: |
    Prevent outliers from negatively impacting BufStats' statistical summary.
tags: 
    - mean
    - median
    - mode
    - normal
    - outlier
flair: tutorial
featuredimage: /learn/outliers/removing_outliers.jpg
---

<script>
    import Admonition from '$lib/components/Admonition.svelte';
    
    import tables from '$lib/data/reference/bufstats/bufstats.json';
    
    let spectral_shape = tables["FluidSpectralShape"];
    let spectral_shape_rows = ["Centroid","Spread","Skewness","Kurtosis","Rolloff","Flatness","Crest"];
    let iqrs = tables["percentiles_range_bounds"];
    let bounds = iqrs.map(x => [x[4],x[5]])
    
    let cutoff_stats = tables["FluidBufStats_outliersCutoff!=-1"];
    let original_stats = tables["FluidBufStats_outliersCutoff=-1"];
    let stats_headers = ["Mean","Std Dev","Skewness","Kurtosis","Low","Middle","High"];
</script>

<Admonition type='pointer'>

For a consideration of what might constitute an outlier and more ideas about how to manage them, visit the page on [Outliers](/learn/outliers)

</Admonition>

BufStats can find and remove outliers by using an analysis of the data to set boundaries for each channel in the buffer. Any frames that have a value outside the its channel's boundaries will not be used to compute the statistics. The strictness of these boundaries is determined by `outliersCutoff` (see below for how this parameter is used). Removing these outliers before computing the statistics will prevent them from affecting the statistical summary so the output of BufStats is a better representation of the majority of the data.

The boundaries of each channel are computed using the _interquartile range_ (IQR), thereby ensuring that the boundaries are relative to the scale and distribution of values. The lower bound of this range is `25th percentile - (IQR * outliersCutoff)`. The upper bound of this range is `75th percentile + (IQR * outliersCutoff)`. The 25th and 75th percentiles are also called "Q1" and "Q3" respectively, short for the 1st Quartile and 3rd Quartile.

The default of -1 bypasses this function, using all the frames in the statistical measurements.

### An example

To demonstrate how this works, consider this output of a [SpectralShape](/reference/spectralshape) analysis (columns are frames and rows are channels of the ``features`` buffer):

<table>
    <thead>
        <tr>
        <td class="border-less"></td>
            {#each spectral_shape[0] as _,i}
                <th><b>FFT Frame {i+1}</b></th>
            {/each}
        </tr>
    </thead>
    <tbody>
        {#each spectral_shape as row,i}
          <tr>
          <th align="left"><b>{spectral_shape_rows[i]}</b></th>
            {#each row as cell}
              <td>{+cell.toFixed(2)}</td>
            {/each}
          </tr>
        {/each}
    </tbody>
</table>

---

First, BufStats will find the Q1 and Q3. Using these it will calculate the interquartile range (IQR) which is the difference between these two values (Q3 - Q1). Next a "Margin" is calculated as `IQR * outliersCutoff` (in this example, ``outliersCutoff`` = 1.1). Finally, the lower and upper bounds are calculated as a "Margin distance" below Q1 and above Q3. `lower bound = Q1 - Margin`, `upper bound = Q3 + Margin`.

<table>
    <thead>
        <tr>
        <td class="border-less"></td>
        <th><b>Q1</b></th>
        <th><b>Q3</b></th>
        <th><b>IQR</b></th>
        <th><b>Margin</b></th>
        <th><b>Lower Bound</b></th>
        <th><b>Upper Bound</b></th>
        </tr>
    </thead>
    <tbody>
        {#each iqrs as row,i}
          <tr>
          <th align="left"><b>{spectral_shape_rows[i]}</b></th>
            {#each row as cell}
              <td>{+cell.toFixed(2)}</td>
            {/each}
          </tr>
        {/each}
    </tbody>
</table>

---

Now, using the lower and upper bounds, BufStats checks the original values in the buffer to see if any fall outside this range.

<table>
    <thead>
        <tr>
        <td class="border-less"></td>
            {#each spectral_shape[0] as _,i}
                <th><b>FFT Frame {i+1}</b></th>
            {/each}
        </tr>
    </thead>
    <tbody>
        {#each spectral_shape as row,i}
          <tr>
          <th align="left"><b>{spectral_shape_rows[i]}</b></th>
            {#each row as cell}
            {#if cell < bounds[i][0] || cell > bounds[i][1]}
              <td bgcolor="FF7A7F">{+cell.toFixed(2)}</td>
            {:else}
              <td>{+cell.toFixed(2)}</td>
            {/if}
            {/each}
          </tr>
        {/each}
    </tbody>
</table>

---

Frames 1, 2, and 3 all have values that fall outside the boundaries. Each of these three frames will be removed from what is used to compute the statistical summary leaving these frames:

<table>
    <thead>
        <tr>
        <td class="border-less"></td>
            {#each Array(5) as _,i}
                <th><b>FFT Frame {i+4}</b></th>
            {/each}
        </tr>
    </thead>
    <tbody>
        {#each spectral_shape as row,i}
          <tr>
          <th align="left"><b>{spectral_shape_rows[i]}</b></th>
            {#each Array(5) as _,j}
              <td>{+row[j+3].toFixed(2)}</td>
            {/each}
          </tr>
        {/each}
    </tbody>
</table>

---

Here are the statistics these selected frames produce:

<table>
    <thead>
        <tr>
        <td class="border-less"></td>
            {#each stats_headers as stat}
                <th><b>{stat}</b></th>
            {/each}
        </tr>
    </thead>
    <tbody>
        {#each cutoff_stats as row,i}
          <tr>
          <th align="left"><b>{spectral_shape_rows[i]}</b></th>
            {#each row as cell}
              <td>{+cell.toFixed(2)}</td>
            {/each}
          </tr>
        {/each}
    </tbody>
</table>

---

Compared to the statistics if all the frames were included:

<table>
    <thead>
        <tr>
        <td class="border-less"></td>
            {#each stats_headers as stat}
                <th><b>{stat}</b></th>
            {/each}
        </tr>
    </thead>
    <tbody>
        {#each original_stats as row,i}
          <tr>
          <th align="left"><b>{spectral_shape_rows[i]}</b></th>
            {#each row as cell}
              <td>{+cell.toFixed(2)}</td>
            {/each}
          </tr>
        {/each}
    </tbody>
</table>

<style>

    table, th, td {
      font-size: 12px;
      border: 1px solid black;
      border-collapse: collapse;
    }
    
    td {
      text-align: center;
    }
    
    th {
      background-color: #DDDDDD;
    }
    
    .border-less {
        border-top: 1px solid #FFFFFF;
        border-left: 1px solid #FFFFFF;
    }
    
</style>
